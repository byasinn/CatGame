üìê Regras de Arquitetura Visual ‚Äì CatGame
1. Proporcionalidade e Tamanho da Janela
Use window.get_size() ou pygame.display.get_surface().get_size() sempre no momento da renderiza√ß√£o.

Nunca use valores fixos como (640, 360) para posicionar ou escalar.

Evite salvar tamanho da janela em vari√°veis globais.

2. Redimensionamento de Imagens
Use pygame.transform.scale() para fundos e overlays conforme o tamanho da janela.

Sprites (ex: personagens e tiros) n√£o precisam de scale, mas devem ter posicionamento proporcional.

Imagens com margens extras podem usar escala de 110% (w * 1.1).

3. Cria√ß√£o de Objetos Gr√°ficos
Sempre crie objetos ap√≥s aplicar resolu√ß√£o, usando apply_resolution().

4. Backgrounds
Devem ser redimensionados usando l√≥gica personalizada como rescale_to_window().

5. Evite posi√ß√µes fixas
Nunca use coordenadas fixas em elementos como texto de menu.

Exemplo correto:
center=(window.get_width() // 2, int(window.get_height() * 0.1))
üéß Regras de √Åudio e Asset Management
üéº √Åudio com AudioController
Use play_music(nome) para m√∫sicas e play_sound(nome) para efeitos.

Evite tocar m√∫sicas repetidas.

Use stop_music() ao trocar de contexto.

Volume controlado por set_music_volume() e set_sfx_volume().

üóÇÔ∏è AssetManager (centraliza tudo)
Imagens: AssetManager.get_image("NomeImagem.png")

Fontes: AssetManager.get_font("VT323-Regular", 22)

Sons: AssetManager.get_sound("Player1Shot")

‚ùó Nunca use diretamente:
pygame.image.load
pygame.font.Font
pygame.mixer.Sound

üåê Internacionaliza√ß√£o (i18n) ‚Äì lang.py
Uso
Para textos traduz√≠veis: t("new_game")

Idiomas dispon√≠veis: pt, en

Textos organizados em LANG_DICT

Cutscenes
Falas simples ‚Üí listas em lang.py

Cutscenes complexas ‚Üí SceneCinematicSystem.py

‚öôÔ∏è Configura√ß√µes ‚Äì settingsmanager.py
Uso de Configura√ß√µes
Acesso sempre via SettingsManager.get() / set()

Salvas automaticamente em settings.json

load() deve ser chamado no in√≠cio do jogo

Padr√µes:
Chave	Tipo	Valor
resolution_index	int	2 (960√ó540)
fullscreen	bool	False
music_volume	float	0.6
sfx_volume	float	0.8
language	str	"pt"
visual_effects	bool	True
gore	bool	True

üéÆ Mapeamento de Teclas ‚Äì keys.py
Teclas organizadas por contexto:

PLAYER1_KEYS, PLAYER2_KEYS

MENU_KEYS, CUTSCENE_KEYS

DEV_KEYS para testes

üß© L√≥gica do Jogo ‚Äì Entidades, Menu, Colis√µes e Tiros
1. Entidades
Todas herdam de Entity com:

self.surf (imagem)

self.rect (posi√ß√£o e colis√£o)

self.health, self.speed, self.damage, self.score

M√©todos: move(), update(), take_damage()

Tipos:

Player ‚Äì controlado pelo jogador, com tiro e colis√£o

Enemy ‚Äì IA simples

Shot ‚Äì proj√©til

Background, BackgroundFloat ‚Äì elementos visuais (sem colis√£o)

2. Fluxo do Jogo
Game ‚Üí Menu ‚Üí GameManager ‚Üí Level ‚Üí (Scene opcional) ‚Üí Jogo ‚Üí GameOver/Menu
game.py ‚Üí inicializa sistema, resolu√ß√£o e √°udio
menu.py ‚Üí cuida da navega√ß√£o
GameManager ‚Üí instancia o Level com base na escolha
Level ‚Üí controla l√≥gica de update/render e entidades

3. Sistema de Colis√£o
Baseado em pygame.Rect.colliderect()

Checado no loop do Level usando grupos:

player_shots, enemies, enemy_shots

Exemplos:

Player colide com inimigo ‚Üí leva dano

Tiro colide com inimigo ‚Üí dano + destrui√ß√£o

4. Sistema de Tiro
Players e inimigos usam:

Delay (ENTITY_SHOT_DELAY)

Som (AudioController)

Cria√ß√£o de Shot com dano baseado em ENTITY_DAMAGE

Exemplo:
if current_time - self.last_shot >= self.shot_delay:
    shot = PlayerShot(self.rect.center)
    self.shots.add(shot)
    self.last_shot = current_time
O proj√©til se move automaticamente com base em dire√ß√£o e velocidade.

üìå Outras Regras Importantes
Troca de resolu√ß√£o: todos elementos dependentes de window.get_size() devem ser recalculados

Evite vari√°veis globais para resolu√ß√£o

Nomenclatura de arquivos: padronizada com PascalCase ou Snake_Case

Ex: Level1Bg0, MenuBg1, Enemy1Shot

Cutscenes complexas: devem ser organizadas como listas de dicion√°rios nos arquivos espec√≠ficos por level

Chamadas iniciais obrigat√≥rias:
SettingsManager.load()